import { useEffect, useRef } from "react";

interface VulnerabilityChartData {
  critical: number;
  high: number;
  medium: number;
  low: number;
}

interface VulnerabilityChartProps {
  data: VulnerabilityChartData;
}

export default function VulnerabilityChart({ data }: VulnerabilityChartProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Set canvas size
    const size = 200;
    canvas.width = size;
    canvas.height = size;

    const centerX = size / 2;
    const centerY = size / 2;
    const radius = 80;

    const total = data.critical + data.high + data.medium + data.low;
    
    if (total === 0) {
      // Draw empty state
      ctx.strokeStyle = '#e5e7eb';
      ctx.lineWidth = 8;
      ctx.beginPath();
      ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
      ctx.stroke();
      
      ctx.fillStyle = '#9ca3af';
      ctx.font = '14px Inter, sans-serif';
      ctx.textAlign = 'center';
      ctx.fillText('No Data', centerX, centerY);
      return;
    }

    const colors = {
      critical: '#ef4444', // red-500
      high: '#f97316',     // orange-500
      medium: '#eab308',   // yellow-500
      low: '#3b82f6',      // blue-500
    };

    let currentAngle = -Math.PI / 2; // Start from top

    // Draw each segment
    Object.entries(data).forEach(([severity, count]) => {
      if (count === 0) return;

      const segmentAngle = (count / total) * 2 * Math.PI;
      
      ctx.fillStyle = colors[severity as keyof typeof colors];
      ctx.beginPath();
      ctx.moveTo(centerX, centerY);
      ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + segmentAngle);
      ctx.closePath();
      ctx.fill();

      currentAngle += segmentAngle;
    });

    // Draw inner circle (donut effect)
    ctx.fillStyle = '#ffffff';
    ctx.beginPath();
    ctx.arc(centerX, centerY, radius * 0.6, 0, 2 * Math.PI);
    ctx.fill();

    // Draw total in center
    ctx.fillStyle = '#1f2937';
    ctx.font = 'bold 20px Inter, sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText(total.toString(), centerX, centerY + 5);

  }, [data]);

  return (
    <div className="flex items-center justify-center w-full h-full" data-testid="vulnerability-chart">
      <canvas 
        ref={canvasRef}
        className="max-w-full max-h-full"
        style={{ width: '200px', height: '200px' }}
      />
    </div>
  );
}
