import { useEffect, useState } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useToast } from "@/hooks/use-toast";
import { useQuery, useMutation } from "@tanstack/react-query";
import type { Project, VulnerabilityWithDetails } from "@shared/schema";
import { insertVulnerabilityTotalsSchema } from "@shared/schema";
import { queryClient, apiRequest } from "@/lib/queryClient";
import Header from "@/components/layout/header";
import Sidebar from "@/components/layout/sidebar";
import FileUpload from "@/components/upload/file-upload";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { isUnauthorizedError } from "@/lib/authUtils";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { 
  Bug, 
  FileText, 
  ChartGantt,
  Plus,
  Upload,
  AlertTriangle,
  Calendar,
  Target
} from "lucide-react";

// Use shared schema for vulnerability totals
const vulnerabilityTotalsSchema = insertVulnerabilityTotalsSchema;

export default function PentesterDashboard() {
  const { toast } = useToast();
  const { user, isAuthenticated, isLoading } = useAuth();
  const [activeSection, setActiveSection] = useState('dashboard');
  const [selectedProject, setSelectedProject] = useState<any>(null);
  const [isProjectDetailsModalOpen, setIsProjectDetailsModalOpen] = useState(false);
  const [isUploadReportModalOpen, setIsUploadReportModalOpen] = useState(false);

  // Redirect if not authenticated
  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      toast({
        title: "Unauthorized",
        description: "You are logged out. Logging in again...",
        variant: "destructive",
      });
      setTimeout(() => {
        // Use dev-login in development for easier testing
        const isDev = import.meta.env.DEV;
        window.location.href = isDev ? "/api/dev-login?userId=pentester-user-456&role=pentester" : "/api/login";
      }, 500);
      return;
    }
  }, [isAuthenticated, isLoading, toast]);

  // Projects query
  const { data: projects, isLoading: projectsLoading } = useQuery<Project[]>({
    queryKey: ['/api/projects'],
    retry: false,
  });

  // Vulnerabilities query
  const { data: vulnerabilities, isLoading: vulnerabilitiesLoading } = useQuery<VulnerabilityWithDetails[]>({
    queryKey: ['/api/vulnerabilities'],
    retry: false,
  });

  // Vulnerability totals form
  const form = useForm<z.infer<typeof vulnerabilityTotalsSchema>>({
    resolver: zodResolver(vulnerabilityTotalsSchema),
    mode: 'onChange', // Enable real-time validation
    defaultValues: {
      projectId: '',
      totalVulnerabilities: 0,
      totalHigh: 0,
      totalMedium: 0,
      totalLow: 0,
    },
  });

  // Submit vulnerability totals mutation
  const submitVulnerabilityMutation = useMutation({
    mutationFn: async (data: z.infer<typeof vulnerabilityTotalsSchema>) => {
      await apiRequest('POST', '/api/vulnerability-totals', data);
    },
    onSuccess: (data, variables) => {
      toast({
        title: "Success",
        description: "Vulnerability totals submitted successfully.",
      });
      form.reset();
      // Invalidate the correct cache keys
      queryClient.invalidateQueries({ queryKey: ['/api/vulnerability-totals'] });
      queryClient.invalidateQueries({ queryKey: ['/api/dashboard', 'overview'] });
    },
    onError: (error) => {
      if (isUnauthorizedError(error)) {
        toast({
          title: "Unauthorized",
          description: "You are logged out. Logging in again...",
          variant: "destructive",
        });
        setTimeout(() => {
          // Use dev-login in development for easier testing
          const isDev = import.meta.env.DEV;
          window.location.href = isDev ? "/api/dev-login?userId=pentester-user-456&role=pentester" : "/api/login";
        }, 500);
        return;
      }
      toast({
        title: "Error",
        description: "Failed to submit vulnerability. Please try again.",
        variant: "destructive",
      });
    },
  });

  if (isLoading || !isAuthenticated) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-emerald-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading...</p>
        </div>
      </div>
    );
  }

  if (user?.role !== 'pentester') {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <Card className="w-full max-w-md mx-4">
          <CardContent className="pt-6">
            <div className="text-center">
              <AlertTriangle className="h-12 w-12 text-destructive mx-auto mb-4" />
              <h1 className="text-2xl font-bold text-foreground mb-2">Access Denied</h1>
              <p className="text-muted-foreground">You need pentester privileges to access this page.</p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  const sidebarItems = [
    { id: 'dashboard', label: 'Dashboard', icon: 'tachometer-alt', active: activeSection === 'dashboard' },
    { id: 'projects', label: 'My Projects', icon: 'project-diagram', active: activeSection === 'projects' },
    { id: 'vulnerabilities', label: 'Vulnerabilities', icon: 'exclamation-triangle', active: activeSection === 'vulnerabilities' },
    { id: 'reports', label: 'Upload Reports', icon: 'file-upload', active: activeSection === 'reports' },
    { id: 'tools', label: 'Tools & Scripts', icon: 'tools', active: activeSection === 'tools' },
  ];

  const myProjects = projects || [];
  const activeProjects = myProjects.filter((p: any) => p.status === 'active').length;
  const vulnsFound = vulnerabilities?.length || 0;

  return (
    <div className="min-h-screen bg-muted/30">
      <Header 
        title="SecureVAPT Pentester"
        subtitle="Penetration Testing Dashboard"
        user={user}
        bgColor="bg-emerald-600"
        iconColor="text-white"
        icon={Bug}
      />
      
      <div className="flex">
        <Sidebar 
          items={sidebarItems}
          onItemClick={setActiveSection}
          activeColor="bg-emerald-600 text-white"
        />

        <main className="flex-1 p-6">
          {/* Dashboard Section */}
          {activeSection === 'dashboard' && (
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <h2 className="text-2xl font-bold text-foreground">My Dashboard</h2>
                <Button 
                  className="bg-emerald-600 text-white hover:bg-emerald-700" 
                  data-testid="button-submit-vulnerability"
                  onClick={() => {
                    const submitSection = document.getElementById('submit-vulnerability-section');
                    if (submitSection) {
                      submitSection.scrollIntoView({ behavior: 'smooth' });
                    }
                  }}
                >
                  <Plus className="w-4 h-4 mr-2" />
                  Submit Vulnerability
                </Button>
              </div>

              {/* Stats Cards */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <Card>
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-muted-foreground text-sm">Active Projects</p>
                        <p className="text-3xl font-bold text-foreground" data-testid="text-active-projects">
                          {projectsLoading ? '...' : activeProjects}
                        </p>
                      </div>
                      <div className="w-12 h-12 bg-emerald-100 dark:bg-emerald-900 rounded-full flex items-center justify-center">
                        <ChartGantt className="text-emerald-600 dark:text-emerald-400 h-6 w-6" />
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-muted-foreground text-sm">Vulnerabilities Found</p>
                        <p className="text-3xl font-bold text-foreground" data-testid="text-vulnerabilities-found">
                          {vulnerabilitiesLoading ? '...' : vulnsFound}
                        </p>
                      </div>
                      <div className="w-12 h-12 bg-red-100 dark:bg-red-900 rounded-full flex items-center justify-center">
                        <Bug className="text-red-600 dark:text-red-400 h-6 w-6" />
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-muted-foreground text-sm">Projects Assigned</p>
                        <p className="text-3xl font-bold text-foreground" data-testid="text-projects-assigned">
                          {projectsLoading ? '...' : myProjects.length}
                        </p>
                      </div>
                      <div className="w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center">
                        <FileText className="text-blue-600 dark:text-blue-400 h-6 w-6" />
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Current Projects */}
              <Card>
                <CardHeader>
                  <CardTitle>Current Assignments</CardTitle>
                </CardHeader>
                <CardContent>
                  {projectsLoading ? (
                    <div className="space-y-4">
                      {[...Array(3)].map((_, i) => (
                        <div key={i} className="animate-pulse">
                          <div className="h-24 bg-muted rounded-lg"></div>
                        </div>
                      ))}
                    </div>
                  ) : myProjects.length > 0 ? (
                    <div className="space-y-4">
                      {myProjects.map((project: any) => (
                        <div key={project.id} className="border border-border rounded-lg p-4" data-testid={`card-project-${project.id}`}>
                          <div className="flex items-center justify-between mb-3">
                            <div className="flex items-center space-x-3">
                              <div className="w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center">
                                <ChartGantt className="text-blue-600 dark:text-blue-400 h-6 w-6" />
                              </div>
                              <div>
                                <h4 className="font-semibold text-foreground" data-testid={`text-project-name-${project.id}`}>
                                  {project.name}
                                </h4>
                                <p className="text-sm text-muted-foreground">{project.type}</p>
                              </div>
                            </div>
                            <Badge 
                              variant={project.status === 'active' ? 'default' : project.status === 'completed' ? 'secondary' : 'outline'}
                              data-testid={`badge-project-status-${project.id}`}
                            >
                              {project.status}
                            </Badge>
                          </div>
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                            <div>
                              <p className="text-xs text-muted-foreground">Progress</p>
                              <div className="flex items-center space-x-2 mt-1">
                                <Progress value={project.progress || 0} className="flex-1" />
                                <span className="text-sm font-medium text-foreground">{project.progress || 0}%</span>
                              </div>
                            </div>
                            <div>
                              <p className="text-xs text-muted-foreground">End Date</p>
                              <p className="text-sm font-medium text-foreground mt-1">
                                {project.endDate ? new Date(project.endDate).toLocaleDateString() : 'Not set'}
                              </p>
                            </div>
                            <div>
                              <p className="text-xs text-muted-foreground">Vulnerabilities</p>
                              <p className="text-sm font-medium text-foreground mt-1">
                                {project.vulnerabilities?.length || 0} Found
                              </p>
                            </div>
                          </div>
                          <div className="flex items-center space-x-2">
                            <Button 
                              size="sm" 
                              className="bg-emerald-600 text-white hover:bg-emerald-700" 
                              data-testid={`button-view-project-${project.id}`}
                              onClick={() => {
                                setSelectedProject(project);
                                setIsProjectDetailsModalOpen(true);
                              }}
                            >
                              View Details
                            </Button>
                            <Button 
                              size="sm" 
                              variant="outline" 
                              data-testid={`button-upload-report-${project.id}`}
                              onClick={() => {
                                setSelectedProject(project);
                                setIsUploadReportModalOpen(true);
                              }}
                            >
                              Upload Report
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <ChartGantt className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                      <p className="text-muted-foreground">No projects assigned</p>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Quick Actions */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Upload Report */}
                <Card>
                  <CardHeader>
                    <CardTitle>Quick Upload</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <FileUpload />
                  </CardContent>
                </Card>

                {/* Submit Vulnerability */}
                <Card id="submit-vulnerability-section">
                  <CardHeader>
                    <CardTitle>Submit Vulnerability</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <Form {...form}>
                      <form onSubmit={form.handleSubmit(
                        (data) => {
                          console.log('Form submitted with data:', data);
                          submitVulnerabilityMutation.mutate(data);
                        },
                        (errors) => {
                          console.error('Form validation errors:', errors);
                          toast({
                            title: "Validation Error",
                            description: "Please check all required fields and try again.",
                            variant: "destructive"
                          });
                        }
                      )} className="space-y-4">
                        <FormField
                          control={form.control}
                          name="projectId"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Project</FormLabel>
                              <Select onValueChange={field.onChange} defaultValue={field.value}>
                                <FormControl>
                                  <SelectTrigger data-testid="select-project">
                                    <SelectValue placeholder="Select project" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  {myProjects.map((project: any) => (
                                    <SelectItem key={project.id} value={project.id}>
                                      {project.name}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="totalVulnerabilities"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Total Vulnerabilities</FormLabel>
                              <FormControl>
                                <Input 
                                  type="number" 
                                  placeholder="0" 
                                  {...field} 
                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}
                                  value={field.value?.toString() || '0'}
                                  data-testid="input-total-vulnerabilities" 
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="totalHigh"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Total High Severity</FormLabel>
                              <FormControl>
                                <Input 
                                  type="number" 
                                  placeholder="0" 
                                  {...field} 
                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}
                                  value={field.value?.toString() || '0'}
                                  data-testid="input-total-high" 
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="totalMedium"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Total Medium Severity</FormLabel>
                              <FormControl>
                                <Input 
                                  type="number" 
                                  placeholder="0" 
                                  {...field} 
                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}
                                  value={field.value?.toString() || '0'}
                                  data-testid="input-total-medium" 
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="totalLow"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Total Low Severity</FormLabel>
                              <FormControl>
                                <Input 
                                  type="number" 
                                  placeholder="0" 
                                  {...field} 
                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}
                                  value={field.value?.toString() || '0'}
                                  data-testid="input-total-low" 
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <Button 
                          type="submit" 
                          className="w-full bg-red-600 text-white hover:bg-red-700" 
                          disabled={submitVulnerabilityMutation.isPending || !form.formState.isValid || myProjects.length === 0}
                          data-testid="button-submit-vuln-totals"
                        >
                          {submitVulnerabilityMutation.isPending ? 'Submitting...' : 
                           myProjects.length === 0 ? 'No Projects Available' :
                           'Submit Vulnerability Totals'}
                        </Button>
                        
                        {/* Show validation errors */}
                        {Object.keys(form.formState.errors).length > 0 && (
                          <div className="text-sm text-red-600 mt-2">
                            Please fill in all required fields:
                            <ul className="list-disc list-inside mt-1">
                              {Object.entries(form.formState.errors).map(([field, error]) => (
                                <li key={field}>{field}: {error?.message}</li>
                              ))}
                            </ul>
                          </div>
                        )}
                      </form>
                    </Form>
                  </CardContent>
                </Card>
              </div>
            </div>
          )}

          {/* Other sections can be added here */}
          {activeSection !== 'dashboard' && (
            <div className="text-center py-12">
              <h2 className="text-2xl font-bold text-foreground mb-4">
                {activeSection.charAt(0).toUpperCase() + activeSection.slice(1)} Section
              </h2>
              <p className="text-muted-foreground">This section is under development.</p>
            </div>
          )}
        </main>
      </div>

      {/* Project Details Modal */}
      <Dialog open={isProjectDetailsModalOpen} onOpenChange={setIsProjectDetailsModalOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Project Details</DialogTitle>
          </DialogHeader>
          {selectedProject && (
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h4 className="font-medium mb-1">Project Name</h4>
                  <p className="text-sm text-muted-foreground">{selectedProject.name}</p>
                </div>
                <div>
                  <h4 className="font-medium mb-1">Type</h4>
                  <p className="text-sm text-muted-foreground">{selectedProject.type}</p>
                </div>
                <div>
                  <h4 className="font-medium mb-1">Status</h4>
                  <Badge variant={selectedProject.status === 'active' ? 'default' : 'outline'}>
                    {selectedProject.status}
                  </Badge>
                </div>
                <div>
                  <h4 className="font-medium mb-1">Progress</h4>
                  <p className="text-sm text-muted-foreground">{selectedProject.progress || 0}%</p>
                </div>
              </div>
              <div>
                <h4 className="font-medium mb-1">Description</h4>
                <p className="text-sm text-muted-foreground">{selectedProject.description || 'No description available'}</p>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h4 className="font-medium mb-1">Start Date</h4>
                  <p className="text-sm text-muted-foreground">
                    {selectedProject.startDate ? new Date(selectedProject.startDate).toLocaleDateString() : 'Not set'}
                  </p>
                </div>
                <div>
                  <h4 className="font-medium mb-1">End Date</h4>
                  <p className="text-sm text-muted-foreground">
                    {selectedProject.endDate ? new Date(selectedProject.endDate).toLocaleDateString() : 'Not set'}
                  </p>
                </div>
              </div>
              <div>
                <h4 className="font-medium mb-1">Vulnerabilities Found</h4>
                <p className="text-sm text-muted-foreground">{selectedProject.vulnerabilities?.length || 0}</p>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Upload Report Modal */}
      <Dialog open={isUploadReportModalOpen} onOpenChange={setIsUploadReportModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Upload Report</DialogTitle>
          </DialogHeader>
          {selectedProject && (
            <div className="space-y-4">
              <div>
                <h4 className="font-medium mb-2">Project: {selectedProject.name}</h4>
                <p className="text-sm text-muted-foreground mb-4">
                  Upload security assessment reports for this project
                </p>
                <FileUpload />
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}
